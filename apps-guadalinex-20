#!/bin/bash
clear
# variables
distribucion=$(lsb_release -cs)

#wget --no-check-certificate --content-disposition https://github.com/aosucas499/guadalinex/raw/main/apps-guadalinex-20

### Funciones del script
##		
		function installUbunturepo { 
		sudo echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse restricted" > focal.list
		sudo mv focal.list /etc/apt/sources.list.d/
		sudo apt update
		sudo apt install git gdebi -y
		}

		function unInstallUbunturepo {
 		sudo rm /etc/apt/sources.list.d/focal.list
		sudo apt update
		}

		function installQshutdown {
		sudo echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse restricted" > focal.list
              	sudo mv focal.list /etc/apt/sources.list.d/
             	sudo apt update
		sudo apt install qshutdown
		sudo rm /etc/apt/sources.list.d/focal.list
		sudo apt update
		mkdir ~/.qshutdown
		sudo mkdir /home/usuario/.qshutdown
		cp ./qshutdown/qshutdown.conf ~/.qshutdown/
		sudo cp ./qshutdown/qshutdown.conf /home/usuario/.qshutdown/
		sudo cp /usr/share/applications/qshutdown.desktop /etc/xdg/autostart/
		}
		
		function installDocker {
		sudo echo "deb [arch=amd64] http://archive.ubuntu.com/ubuntu/ focal main universe multiverse restricted" > focal.list
              	sudo mv focal.list /etc/apt/sources.list.d/
             	sudo apt update
		#clear
		sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
		sudo apt install -f
		sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
		sudo echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $distribucion stable" > docker.list
		sudo mv docker.list /etc/apt/sources.list.d/
		sudo apt-key fingerprint 0EBFCD88
		sudo apt update
		#clear
		sudo apt install docker-ce docker-ce-cli containerd.io -y
		sudo usermod -aG docker $USER
		sudo usermod -aG docker usuario
		sudo rm /etc/apt/sources.list.d/focal.list
		sudo rm /etc/apt/sources.list.d/docker.list
		sudo apt update
		sleep 30
		}					

		function installNtpfix {
		sudo cp ./ntp/fix-ntp /usr/bin
		sudo chmod +x /usr/bin/fix-ntp
		sudo chown root:root ./ntp/zz-fix-ntp
		sudo chmod 0440 ./ntp/zz-fix-ntp
		sudo cp ./ntp/zz-fix-ntp /etc/sudoers.d/ 
		sudo cp ./ntp/fix-ntp.desktop /etc/xdg/autostart/
		} 
		
		function installOpenboard {
		sudo apt update        	
		sudo apt install openboard -y
		}
		
		function installChrome {
		wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
		sudo echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > chrome.list
		sudo mv chrome.list /etc/apt/sources.list.d/
		sudo apt update
		sudo apt install google-chrome-stable
		sudo rm /etc/apt/sources.list.d/chrome.list
		sudo apt update
		}

		function installBlinklearning {
		wget https://blinklearning1.blob.core.windows.net/installers/blinkoffline/blinkoffline.sh 
		chmod +x blinkoffline.sh
		./blinkoffline.sh
		echo ""
		echo "Introduce la contraseña del usuario = usuario"
		echo ""
           	su usuario -c ./blinkoffline.sh 				
		sudo rm ~/Escritorio/blink* && sudo rm /home/usuario/Escritorio/blin*
		rm blinkoffline.sh
		}
		
		function installActiv {
		cd promethean
		chmod +x promethean-eos.sh
		./promethean-eos.sh
		cd ..
		}
		
		function installSmartdre {
		git clone https://github.com/aosucas499/smartdre.git
		cd smartdre
		chmod +x install-smartdre
		./install-smartdre
		cd ..
		}
		
# Ejecuta la función correspondiente a cada una de las opciones del script
# ---

function ejecutarAccionOpcional {

    echo "Ejecutamos $1()"
    ($1)
}


# Invocamos ("callback") las funciones asociadas a las opciones 
# seleccionadas por el usuario


		function procesarAccionesOpcionales {

    		# Dividimos (el separador es "|" ) las opciones seleccionadas por el usuario
   
		IFS="|" read -a vals <<< $1

	    	# Solicitamos (una a una) que se procesen dichas opciones

    		for i in "${vals[@]}"
    		do
        	ejecutarAccionOpcional $i
    		done
		}

# -----------------------------------------------------------------------------
# Cuerpo del script
# -----------------------------------------------------------------------------

# Realizamos las opciones por defecto de nuestro script

# Permitimos seleccionar opciones personalizadas

# Mostramos las opciones personalizables

opc=$( \
    zenity \
        --list \
        --title="Elija las personalizaciones que desea aplicar" \
        --checklist \
        --column="Aplicar" \
        --column="funcionAEjecutar" \
        --column="Descripción" \
        --hide-column=2 \
        --width=600 \
        --height=450 \
    False installUbunturepo "Instalar repositorios Ubuntu 20 Focal" \
    False unInstallUbunturepo "Desinstalar repositorios Ubuntu 20 Focal" \
    False installQshutdown "Instalar Apagado automático a las 14:01 L-V (app qshutdown)" \
    False installDocker "Instalar Docker" \
    False installNtpfix "Instalar corrección de hora en equipos conectados por wifi" \
    False installOpenboard "Instalar aplicación de pizarra Openboard" \
    False installChrome "Instalar navegador Chrome" \
    False installBlinklearning "Instalar aplicación blinklearning - Usado en libros de Oxford" \
    False installActiv "Instalar drivers pizarras Promethean y aplicación ActivInspire" \
    False installSmartdre "Instalar drivers pizarras Smartboard-incluida SB480" \
)

# Comprobamos que no se pulse el botón Cancelar

	if [[ "$?" != 0 ]]; then
    	echo "Sin problemas, ya personalizaremos otro día ;)"
    	exit 0
	fi

# Procesamos las opciones elegidas por el usuario
# ---

	procesarAccionesOpcionales $opc

